@Article{buccafurriETAL:1999,
  author =	 {Francesco Buccafurri and Thomas Eiter and Georg
                  Gottlob and Nicola Leone},
  title =	 {Enhancing Model Checking in Verification by {AI}
                  techniques},
  journal =	 AIJ,
  year =	 1999,
  volume =	 112,
  pages =	 {57--104},
  annote =	 {Describes a technique for adding automatic repair to
                  model checking verification. They use abductive
                  model revision to alter a concurrent program
                  description in the face of a counterexample. Their
                  concurrent programs are described in terms of jumps
                  and (boolean) assignments. Repairs are in terms of
                  changing assignment values and changing assignment
                  orderings. The class of repairs considered here seem
                  most appropriate for handling concurrency protocol
                  errors, especially involving mutual exclusion and
                  deadlocks. They seem less appropriate for control
                  applications. Counterexamples are used to reduce the
                  set of repair candidates that must be
                  considered. (In order to handle ACTL formulas, the
                  authors consider tree-shaped counterexamples, not
                  just simple linear counterexamples.) In particular,
                  their technique ``identifies corrections $\alpha$
                  under which the counterexample is invariant, i.e.,
                  still apply if $\alpha$ is implemented.'' They
                  introduce efficiently computable conditions on
                  counterexamples and corrections that provide this
                  filtering.}
}



