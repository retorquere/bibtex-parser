/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */
'use strict'
exports[`test/all.js > TAP > import=Some bibtex entries quietly discarded on import from bib file #873-article:buccafurrietal:1999.bib > must match snapshot 1`] = `
Object {
  "comments": Array [],
  "entries": Array [
    Object {
      "fields": Object {
        "annote": "Describes a technique for adding automatic repair to model checking verification. They use abductive model revision to alter a concurrent program description in the face of a counterexample. Their concurrent programs are described in terms of jumps and (boolean) assignments. Repairs are in terms of changing assignment values and changing assignment orderings. The class of repairs considered here seem most appropriate for handling concurrency protocol errors, especially involving mutual exclusion and deadlocks. They seem less appropriate for control applications. Counterexamples are used to reduce the set of repair candidates that must be considered. (In order to handle ACTL formulas, the authors consider tree-shaped counterexamples, not just simple linear counterexamples.) In particular, their technique “identifies corrections α under which the counterexample is invariant, i.e., still apply if α is implemented.” They introduce efficiently computable conditions on counterexamples and corrections that provide this filtering.",
        "author": Array [
          Object {
            "firstName": "Francesco",
            "lastName": "Buccafurri",
          },
          Object {
            "firstName": "Thomas",
            "lastName": "Eiter",
          },
          Object {
            "firstName": "Georg",
            "lastName": "Gottlob",
          },
          Object {
            "firstName": "Nicola",
            "lastName": "Leone",
          },
        ],
        "journal": "AIJ",
        "pages": "57–104",
        "title": "Enhancing Model Checking in Verification by <span class=\\"nocase\\">AI</span> techniques",
        "volume": "112",
        "year": "1999",
      },
      "input": String(
        @Article{buccafurriETAL:1999,
          author =\\t {Francesco Buccafurri and Thomas Eiter and Georg
                          Gottlob and Nicola Leone},
          title =\\t {Enhancing Model Checking in Verification by {AI}
                          techniques},
          journal =\\t AIJ,
          year =\\t 1999,
          volume =\\t 112,
          pages =\\t {57--104},
          annote =\\t {Describes a technique for adding automatic repair to
                          model checking verification. They use abductive
                          model revision to alter a concurrent program
                          description in the face of a counterexample. Their
                          concurrent programs are described in terms of jumps
                          and (boolean) assignments. Repairs are in terms of
                          changing assignment values and changing assignment
                          orderings. The class of repairs considered here seem
                          most appropriate for handling concurrency protocol
                          errors, especially involving mutual exclusion and
                          deadlocks. They seem less appropriate for control
                          applications. Counterexamples are used to reduce the
                          set of repair candidates that must be
                          considered. (In order to handle ACTL formulas, the
                          authors consider tree-shaped counterexamples, not
                          just simple linear counterexamples.) In particular,
                          their technique \`\`identifies corrections $\\\\alpha$
                          under which the counterexample is invariant, i.e.,
                          still apply if $\\\\alpha$ is implemented.'' They
                          introduce efficiently computable conditions on
                          counterexamples and corrections that provide this
                          filtering.}
        }
      ),
      "key": "buccafurriETAL:1999",
      "mode": Object {
        "annote": "richtext",
        "author": "creatorlist",
        "journal": "literal",
        "pages": "literal",
        "title": "title",
        "volume": "literal",
        "year": "literal",
      },
      "type": "article",
    },
  ],
  "errors": Array [
    Object {
      "error": "Unresolved @string reference \\"AIJ\\"",
      "input": "AIJ",
    },
  ],
  "jabref": Object {
    "groups": Object {},
    "root": Array [],
  },
  "preamble": Array [],
  "strings": Object {},
}
`
