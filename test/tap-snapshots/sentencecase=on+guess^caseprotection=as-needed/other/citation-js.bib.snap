/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */
'use strict'
exports[`test/all.js > TAP > other=citation-js.bib > must match snapshot 1`] = `
Object {
  "comments": Array [
    "@book{a, title = \\"foo\\"}",
  ],
  "entries": Array [
    Object {
      "fields": Object {
        "author": Array [
          Object {
            "lastName": "Author",
          },
        ],
        "journal": "a space between this and this",
        "title": "åı and íTitle string a string b string c",
        "year": "1990",
      },
      "input": String(
        @article{key,
            author  = {Author},
            title   = {{\\\\r a}{\\\\i} and {\\\\'i}Title} # a # b # c,
            year    = 1990,
            journal = j # {and this}
        }
      ),
      "key": "key",
      "mode": Object {
        "author": "creator",
        "journal": "literal",
        "title": "title",
        "year": "literal",
      },
      "type": "article",
    },
    Object {
      "fields": Object {
        "title": "ı",
      },
      "input": "@book{label, title = i }",
      "key": "label",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = \\"foo\\"}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@BoOk{a, title = \\"foo\\"}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@BOOK{a, title = \\"foo\\"}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book(a, title = \\"foo\\")",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": String(
        @
              book
            {
              a
            ,
              title = "foo"
            }
      ),
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = \\"f\\" # a:a # b:b}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "a:a": "foo",
      },
      "input": "@book{a, a:a = \\"foo\\" }",
      "key": "a",
      "mode": Object {
        "a:a": "literal",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a1, title = \\"foo\\"}",
      "key": "a1",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{b:b, title = \\"foo\\"}",
      "key": "b:b",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{\\"a\\", title = \\"foo\\"}",
      "key": "\\"a\\"",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = \\"foo\\"}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = {foo}}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = foo}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = foo}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = foo}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = foo}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = foo}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{b, title = FOO}",
      "key": "b",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "title": "foo",
      },
      "input": "@book{a, title = fo # o}",
      "key": "a",
      "mode": Object {
        "title": "title",
      },
      "type": "book",
    },
    Object {
      "fields": Object {
        "author": Array [
          Object {
            "lastName": "Bausch",
          },
          Object {
            "lastName": "Lomb",
          },
          Object {
            "name": "Bausch and Lomb",
          },
        ],
        "title": "Stability Analysis and <i>optimization</i>",
      },
      "input": String(
        @article{test,
              author = {Bausch and Lomb and {Bausch and Lomb}},
              title = {Stability {Analysis} and {\\\\emph{Optimization}}}
            }
      ),
      "key": "test",
      "mode": Object {
        "author": "creator",
        "title": "title",
      },
      "type": "article",
    },
    Object {
      "fields": Object {
        "author": Array [
          Object {
            "firstName": "Philippe",
            "initial": "Ph",
            "lastName": "Duchamp",
          },
        ],
      },
      "input": String(
        @article{test,
              author = {family=Duchamp, given=Philippe, given-i={Ph}}
            }
      ),
      "key": "test",
      "mode": Object {
        "author": "creator",
      },
      "type": "article",
    },
    Object {
      "fields": Object {
        "file": "files/Zuniga:2016jt/A4FA1025_A4E7{}422A-9368-1E1F1B9B0166.pdf",
      },
      "input": String(
        @article{test,
              file = {files/Zuniga:2016jt/A4FA1025_A4E7{}422A-9368-1E1F1B9B0166.pdf}
            }
      ),
      "key": "test",
      "mode": Object {
        "file": "verbatim",
      },
      "type": "article",
    },
    Object {
      "fields": Object {
        "publisher": Array [
          "Dŏ}ëad Poₑₑₑt Society",
        ],
      },
      "input": String(
        @article{test,
              publisher =  { D{\\\\u{o}}\\\\}\\\\"ead Po$_{eee}$t Society},
            }
      ),
      "key": "test",
      "mode": Object {
        "publisher": "literallist",
      },
      "type": "article",
    },
    Object {
      "fields": Object {
        "title": "½ and <span class=\\"nocase\\">ⁿ⁄₂</span>",
      },
      "input": String(
        @article{test,
              title = {$\\\\frac 1 2$ and $\\\\frac{n}{2}$}
            }
      ),
      "key": "test",
      "mode": Object {
        "title": "title",
      },
      "type": "article",
    },
    Object {
      "fields": Object {
        "title": "A <i>A A A</i> A <i>A</i>",
      },
      "input": "@article{test, title = \\"A {\\\\em A} \\\\begin{em}A\\\\end{em} \\\\begin{em}{A}\\\\end{em} {A \\\\em A}\\"}",
      "key": "test",
      "mode": Object {
        "title": "title",
      },
      "type": "article",
    },
  ],
  "errors": Array [],
  "jabref": Object {
    "groups": Object {},
    "root": Array [],
  },
  "preamble": Array [
    " \\"test\\" ",
    " include ",
    " include # include ",
  ],
  "strings": Object {
    "A": " string a",
    "A:A": "o",
    "B": " string b",
    "B:B": "o",
    "C": " string c",
    "F": "f",
    "FO": "fo",
    "FOO": "foo",
    "I": "ı",
    "INCLUDE": "a",
    "J": "a space between this ",
    "O": "o",
  },
}
`
