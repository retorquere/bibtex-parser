comments: []
entries:
  - fields:
      annote: >-
        Describes a technique for adding automatic repair to model checking
        verification. They use abductive model revision to alter a concurrent
        program description in the face of a counterexample. Their concurrent
        programs are described in terms of jumps and (boolean) assignments.
        Repairs are in terms of changing assignment values and changing
        assignment orderings. The class of repairs considered here seem most
        appropriate for handling concurrency protocol errors, especially
        involving mutual exclusion and deadlocks. They seem less appropriate for
        control applications. Counterexamples are used to reduce the set of
        repair candidates that must be considered. (In order to handle ACTL
        formulas, the authors consider tree-shaped counterexamples, not just
        simple linear counterexamples.) In particular, their technique
        “identifies corrections α under which the counterexample is invariant,
        i.e., still apply if α is implemented.” They introduce efficiently
        computable conditions on counterexamples and corrections that provide
        this filtering.
      author:
        - firstName: Francesco
          lastName: Buccafurri
        - firstName: Thomas
          lastName: Eiter
        - firstName: Georg
          lastName: Gottlob
        - firstName: Nicola
          lastName: Leone
      journal: AIJ
      pages: 57–104
      title: Enhancing Model Checking in Verification by AI techniques
      volume: '112'
      year: '1999'
    input: "@Article{buccafurriETAL:1999,\n  author =\t {Francesco Buccafurri and Thomas Eiter and Georg\n                  Gottlob and Nicola Leone},\n  title =\t {Enhancing Model Checking in Verification by {AI}\n                  techniques},\n  journal =\t AIJ,\n  year =\t 1999,\n  volume =\t 112,\n  pages =\t {57--104},\n  annote =\t {Describes a technique for adding automatic repair to\n                  model checking verification. They use abductive\n                  model revision to alter a concurrent program\n                  description in the face of a counterexample. Their\n                  concurrent programs are described in terms of jumps\n                  and (boolean) assignments. Repairs are in terms of\n                  changing assignment values and changing assignment\n                  orderings. The class of repairs considered here seem\n                  most appropriate for handling concurrency protocol\n                  errors, especially involving mutual exclusion and\n                  deadlocks. They seem less appropriate for control\n                  applications. Counterexamples are used to reduce the\n                  set of repair candidates that must be\n                  considered. (In order to handle ACTL formulas, the\n                  authors consider tree-shaped counterexamples, not\n                  just simple linear counterexamples.) In particular,\n                  their technique ``identifies corrections $\\alpha$\n                  under which the counterexample is invariant, i.e.,\n                  still apply if $\\alpha$ is implemented.'' They\n                  introduce efficiently computable conditions on\n                  counterexamples and corrections that provide this\n                  filtering.}\n}"
    key: buccafurriETAL:1999
    mode:
      annote: richtext
      author: creatorlist
      journal: literal
      pages: literal
      title: title
      volume: literal
      year: literal
    type: article
errors:
  - error: Unresolved @string reference "AIJ"
    input: ''
jabref:
  groups: {}
  root: []
preamble: []
strings: {}
